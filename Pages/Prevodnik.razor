@page "/"
@inject IJSRuntime iJSRuntime

<h1 class="h1 text-left">Visualizer</h1>


<div>
    <InputFile OnChange="OnInputFileChange" multiple />
    <br /><br />
    <button class="btn btn-primary" type="button" style=@styleDisplayButton @onclick="@DisplayData">Zobraziť dáta</button>
    <button class="btn btn-primary" type="button" style=@styleLoadingDisplay disabled>
      <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
      Zobrazovanie...
    </button>
    <button class="btn btn-secondary" type="button" style=@styleConvertButton @onclick="@ConvertFile">Konvertovať súbor</button>
    <button class="btn btn-secondary" type="button" style=@styleLoadingConvert disabled>
      <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
      Konvertovanie...
    </button>
    <button class="btn btn-outline-dark" type="button" @onclick="@DownloadFile" style=@styleDownloadButton>Stiahnuť vcd</button>
</div>
<p>@messageFiles</p>

<br />
<h2 class="h2 text-left">Filtrovanie</h2>

<div class="container">
    <!--<h3 class="text-left font-weight-bold">Filtrovanie</h3>-->
    <div class="row">
        <div class="col-3 border border-light m-3 rounded bg-light">
            <p class="text-center font-weight-bold pt-2">CAN ID</p>
            <div style="@styleLoadingIds" class="align-items-center">
              <strong>Vytváranie zoznamu ID...</strong>
              <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
            </div>
    @if (selectableIDs is not null)
{
    foreach (var item in selectableIDs)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind-value="@item.IsSelected">
            <label class="form-check-label" for="flexCheckDefault">
              @item.Name
            </label>
        </div>
    }
}
</div>
<div class="col-2 border border-light m-3 rounded bg-light">
    <p class="text-center font-weight-bold pt-2">Dĺžka</p>
    @if (selectableLength is not null)
{
    foreach (var item in selectableLength)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" @bind-value="@item.IsSelected">
            <label class="form-check-label" for="flexCheckDefault">
              @item.Name
            </label>
        </div>
    }
}
</div>
<div class="col-2 border border-light m-3 rounded bg-light">
    <p class="text-center font-weight-bold pt-2">Maska</p>
    <EditForm Model="model">
 
        <div style="display:block;text-align:center;">
        <InputSelect id="length" @bind-Value="@SelectedLengthProperty">
            @foreach (var option in dlcConversion)
           {
            <option @onclick="OnMaskChoise" value="@option">@option</option>
           }
        </InputSelect>
        </div>
        @foreach (var item in selectableBytes)
       {
           <span class="mask-container">
               <input class="input-mask" type="text" maxlength="2" @bind-value="@item.Name">
               <input type="checkbox" @bind-value="@item.IsSelected">
           </span>
       }
    </EditForm>
    <br />
</div>
<div class="col-5">
    @if (selectedFrame != null)
{
    <p>
        <b>FD:      </b>   <span>@selectedFrame.FD1</span> <br>
        <b>Čas:       </b>   <span>@selectedFrame.TimeHumanized()</span> <br>
        <b>CAN ID:   </b>   <span>@selectedFrame.Id</span> <br>
        <b>Dĺžka dát: </b>   <span>@selectedFrame.Length</span> <br>
        <b>Error:    </b>   <span>@selectedFrame.Esi</span> <br>
        <b>Dáta:     </b>   <span>@selectedFrame.DataWithSpaces()</span> <br>
    </p>
}
</div>
</div>

</div>
<!--<button class="btn btn-primary m-2" @onclick="@ApplyFilter">Filtrovať</button>-->
<br />
<button class="btn btn-secondary m-2" @onclick="@zoomIn">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-zoom-in" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/>
  <path d="M10.344 11.742c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1 6.538 6.538 0 0 1-1.398 1.4z"/>
  <path fill-rule="evenodd" d="M6.5 3a.5.5 0 0 1 .5.5V6h2.5a.5.5 0 0 1 0 1H7v2.5a.5.5 0 0 1-1 0V7H3.5a.5.5 0 0 1 0-1H6V3.5a.5.5 0 0 1 .5-.5z"/>
</svg>
</button>
<button class="btn btn-dark m-auto" @onclick="zoomOut">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-zoom-out" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/>
  <path d="M10.344 11.742c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1 6.538 6.538 0 0 1-1.398 1.4z"/>
  <path fill-rule="evenodd" d="M3 6.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"/>
</svg>
</button>
<br />
<div class="timeline_container " @onclick="@OnTimelineContainerClick">
    
    @foreach (var id in selectedIDs)
    {
        <div class="timeline" style="@StyleTimeline()">

            <Virtualize Items="@filtratedFrames" Context="frame">
                @if (frame.Id == id)
                    {
                        <button class="dot" @onclick="() => DisplayFrame(frame)" style="@StyleDot(frame)"></button>
                    }
            </Virtualize>

            
        </div>

    }
    <div class="vertical_line_container" style="@StyleVerticalContainer()">

        @for (long i = 0; i < timeSpan; i += 400*accuracy)
           {
               <span class="vertical_line" style="@StyleVertical(i)">@CANFrame.HumanizeTimeStatic(i+timeStart)</span>
           }   
           <span class="vertical_line" id="user-cursor" style="@userVerticalLineStyle"><p id="user-cursor-text">@userVerticalLineTime</p></span>

    </div>
</div>


<br />
<br />
<br />
<br />

<h2 class="h2 text-center">Tabuľkové zobrazenie</h2>
<br />
<div class="container overflow-auto " style="height: 400px">
    <TableTemplate Items="filtratedFrames" Context="canframe">
        <TableHeader>
            <th>FD</th>
            <th>Čas</th>
            <th>CAN ID</th>
            <th>Dĺžka dát</th>
            <th>Error</th>
            <th>Dáta</th>
        </TableHeader>
        <RowTemplate>
            <td>@canframe.FD1</td>
            <td>@canframe.TimeHumanized()</td>
            <td>@canframe.Id</td>
            <td>@canframe.Length</td>
            <td>@canframe.Esi</td>
            <td>@canframe.Data</td>
        </RowTemplate>
    </TableTemplate>
</div>

@code {
                  /*<td>@canframe.RRS_RTR1</td>
                  <td>@canframe.IDE1</td>
                  <td>@canframe.FDF1</td>
                  <td>@canframe.BRS1</td>
                  disabled="@IsDisabledDisplayData"

                  TODO: dalsie filtre
                  filtrovanie VCD suboru


                  @foreach (var frame in filtratedFrames)
                        {
                        @if (frame.Id == id)
                        {
                        <button class="dot" @onclick="() => DisplayFrame(frame)" style="@StyleDot(frame)"></button>
    }     
    }
    */
    string messageFiles = "Žiadne vybrané súbory";
    IReadOnlyList<IBrowserFile> selectedFiles;
    string vcdText;
    string styleDisplayButton = "display:none";
    string styleConvertButton = "display:none";
    string styleDownloadButton = "display:none";
    string styleLoadingIds = "display:none";
    string styleLoadingDisplay = "display:none";
    string styleLoadingConvert = "display:none";
    string userVerticalLineStyle = "left:0px;";
    string userVerticalLineTime = CANFrame.HumanizeTimeStatic(0);
    string frameText = "";
    List<CANFrame> allFrames = new();
    List<CANFrame> filtratedFrames = new();
    CANFrame selectedFrame;
    protected bool IsDisabledDisplayData { get; set; }
    long timeStart = 0, timeSpan = 0;
    int accuracy = 10;
    List<SelectablePattern> selectableBytes = new();
    private List<string> allIDs = new();
    class SelectablePattern { public string Name; public bool IsSelected; }
    List<SelectablePattern> selectableIDs = new();
    int[] dlcConversion = new[] {0,1,2,3,4,5,6,7,8,12,16,20,24,32,48,64};
    SelectablePattern[] selectableLength = new SelectablePattern[] {
        new SelectablePattern { Name = "0", IsSelected = false},
        new SelectablePattern { Name = "1", IsSelected = false},
        new SelectablePattern { Name = "2", IsSelected = false},
        new SelectablePattern { Name = "3", IsSelected = false},
        new SelectablePattern { Name = "4", IsSelected = false},
        new SelectablePattern { Name = "5", IsSelected = false},
        new SelectablePattern { Name = "6", IsSelected = false},
        new SelectablePattern { Name = "7", IsSelected = false},
        new SelectablePattern { Name = "8", IsSelected = false},
        new SelectablePattern { Name = "12", IsSelected = false},
        new SelectablePattern { Name = "16", IsSelected = false},
        new SelectablePattern { Name = "20", IsSelected = false},
        new SelectablePattern { Name = "24", IsSelected = false},
        new SelectablePattern { Name = "32", IsSelected = false},
        new SelectablePattern { Name = "48", IsSelected = false},
        new SelectablePattern { Name = "64", IsSelected = false } };
    int selectedLength = 0;
    Model model = new Model();
    List<string> selectedIDs = new();

    public int SelectedLengthProperty
    {
        get { return selectedLength; }
        set
        {
            selectedLength = value;
            OnMaskChoise();
        }

    }

    class Model
    {
        public int modelLength { get; set; }
    }

    private string StyleTimeline()
    {
        return "width: " + (timeSpan/accuracy) + "px";
    }

    private string StyleVertical(long i)
    {
        return "left: " + i/accuracy + "px";
    }

    private int numLengthsSelected()
    {
        int num = 0;
        foreach (SelectablePattern selectable in selectableLength)
        {
            if (selectable.IsSelected)
                num++;
        }
        return num;
    }

    private string StyleVerticalContainer()
    {
        int numLines = 0;
        foreach (var item in selectableIDs)
        {
            if (item.IsSelected)
            {
                numLines++;
            }
        }
        int height = 45 * (numLines+1);
        return "height: " + height + "px;" + " margin-top: " + -1*height + "px;";
    }

    private void zoomIn()
    {
        if (accuracy > 1)
            accuracy--;
        userVerticalLineStyle = "left: 0px;";
        userVerticalLineTime = CANFrame.HumanizeTimeStatic(timeStart);
        StateHasChanged();
    }
    private void zoomOut()
    {
        if (timeSpan/accuracy > 800)
            accuracy++;
        StateHasChanged();
    }


    private async Task OnTimelineContainerClick(MouseEventArgs e)
    {
        var mouseX = 0.0;
        try
        {
            mouseX = await iJSRuntime.InvokeAsync<double>("get_position", e);
        }
        catch (Exception) { }
        mouseX += 200;
        userVerticalLineStyle = "left: " + (int)mouseX + "px;";
        userVerticalLineTime = CANFrame.HumanizeTimeStatic(((long)mouseX*accuracy)+timeStart);
        Console.WriteLine("fuj starci");
        //StateHasChanged();

    }


    protected void FillChecklistIDs()
    {
        selectableIDs = allIDs.Select(pat => new SelectablePattern { Name = pat }).ToList();
        foreach (var item in selectableIDs)
        {
            item.IsSelected = false;
        }
        StateHasChanged();
    }

    private void OnMaskChoise()
    {
        selectableBytes.Clear();
        for (var i = 0; i < selectedLength; i++)
        {
            selectableBytes.Add(new());
        }
        StateHasChanged();
    }
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        long fileSizeComined = 0;
        foreach (var file in selectedFiles)
        {
            fileSizeComined += file.Size;
        }
        if (fileSizeComined > 100000000)
        {
            Alert("Vybrané súbory sú príliš veľké, pre zobrazenie väčších súborov môžete použiť desktopovú aplikáciu");
            messageFiles = "Súbory sú priveľké, použite aplikáciu pre Windows";
            return;
        }

        messageFiles = $"{selectedFiles.Count} vybrané súbory";
        styleDownloadButton = "display:none";
        styleConvertButton = "display: none";
        styleDisplayButton = "display: none";
        styleLoadingIds = "display: block";
        styleLoadingDisplay = "display:none";
        styleLoadingConvert = "display:none";
        selectableIDs.Clear();

        try
        {
            VCDGenerator generator = new(selectedFiles);
            await generator.FindAllIDsAsync();
            allIDs = generator.AllIDs;
            FillChecklistIDs();
            styleConvertButton = "display: inline";
            styleDisplayButton = "display: inline";
            styleLoadingIds = "display: none";
            this.StateHasChanged();
        }
        catch (Exception exception)
        {
            messageFiles = "Nesprávny formát, vyberte iný súbor";
            styleLoadingIds = "display: none";
            StateHasChanged();
            try { Alert("Vybrané súbory majú nesprávny formát, alebo sú poškodené"); }
            catch (Exception) { }

        }
    }

    private void ApplyFilter()
    {
        filtratedFrames.Clear();
        selectedIDs.Clear();

        foreach (var id in selectableIDs)
        {
            if (id.IsSelected) selectedIDs.Add(id.Name);
        }


        List<int> selectedLengths = new();
        if (selectedLength != 0)
        {
            selectedLengths.Add(selectedLength);
        }
        else foreach (var item in selectableLength)
            {
                if (item.IsSelected) selectedLengths.Add(int.Parse(item.Name));
            }
        foreach (var frame in allFrames)
        {
            if (selectedIDs.Contains(frame.Id) && selectedLengths.Contains(frame.Length))
            {
                filtratedFrames.Add(frame);
            }
        }


        foreach (var frame in filtratedFrames.ToList())
        {
            int i = 0;
            foreach (var hexByte in selectableBytes)
            {
                if (hexByte.Name == null) 
                {
                    i+=2;
                    continue;
                }

                if (OnlyHexInString(hexByte.Name) && hexByte.IsSelected)
                {
                    if (!hexByte.Name.Equals(frame.Data.Substring(i, 2)))
                    {
                        filtratedFrames.Remove(frame);
                        break;
                    }
                }
                i+=2;
            }
        }
        StateHasChanged();
    }

    async Task DisplayData()
    {
        styleDisplayButton = "display:none";
        styleLoadingDisplay = "display:inline";
        IsDisabledDisplayData = true;
        allFrames.Clear();
        foreach (var file in selectedFiles)
        {
            Stream fs = file.OpenReadStream(1000000000);
            TextReader reader = new StreamReader(fs, Encoding.UTF8);
            await reader.ReadLineAsync();
            while (true)
            {
                string line = await reader.ReadLineAsync();
                if (line == null)
                    break;
                allFrames.Add(new(line));
            }
        }
        ApplyFilter();
        long timeLast;
        timeStart = allFrames[0].Time;
        timeLast = allFrames[allFrames.Count-1].Time;
        timeSpan = timeLast - timeStart;

        styleDisplayButton = "display:inline";
        styleLoadingDisplay = "display:none";
        this.StateHasChanged();
    }

    private string StyleDot(CANFrame frame)
    {
        string style = "";
        style += "left: " + ((frame.Time-timeStart)/accuracy-192) + "px;";
        if (frame.Esi)
            style += "background: red";
        else if (frame.FD1)
            style += "background: blueviolet";
        return style;
    }

    private void DisplayFrame(CANFrame frame)
    {
        selectedFrame = frame;
    }

    async Task ConvertFile()
    {
        styleConvertButton = "display:none";
        styleLoadingConvert = "display:inline";

        List<string> allowedIDs = new();
        foreach (var id in selectableIDs)
        {
            if (id.IsSelected)
                allowedIDs.Add(id.Name);
        }
        VCDGenerator generator = new(selectedFiles);
        generator.setIdFilter(allowedIDs);
        vcdText = await generator.Generate();
        //Console.Write(vcdText);
        styleDownloadButton = "display:inline";
        styleConvertButton = "display:inline";
        styleLoadingConvert = "display:none";
    }

    private async Task DownloadFile()
    {
        // await iJSRuntime.InvokeVoidAsync("download", "generated.vcd", vcdText);
        await iJSRuntime.InvokeAsync<object>("saveFile", "generated.vcd", vcdText);
        // await iJSRuntime.InvokeVoidAsync("saveFile", "file.txt", "text/plain", vcdText);
    }
    public bool OnlyHexInString(string test)
    {
        // For C-style hex notation (0xFF) you can use @"\A\b(0[xX])?[0-9a-fA-F]+\b\Z"
        if (test == null) return false;
        return System.Text.RegularExpressions.Regex.IsMatch(test, @"\A\b[0-9a-fA-F]+\b\Z");
    }
    private static bool IsBlank(List<SelectablePattern> selectablePatterns)
    {
        foreach (var item in selectablePatterns)
        {
            if (!(item.Name == null || item.Name == "" || !item.IsSelected))
            {
                return false;
            }
        }
        return true;
    }
    private async void Alert(string message)
    {
        try { await iJSRuntime.InvokeAsync<object>("alertovaj", message); }
        catch (Exception) { };
    }

}
